generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  isActive      Boolean        @default(true)
  roleId        String
  officeId      String
  departmentId  String?
  jobPositionId String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastLoginAt   DateTime?
  refreshTokens RefreshToken[]
  office        Office         @relation(fields: [officeId], references: [id])
  role          Role           @relation(fields: [roleId], references: [id])
  department    Department?    @relation(fields: [departmentId], references: [id])
  jobPosition   JobPosition?   @relation(fields: [jobPositionId], references: [id])
  createdApprovalItems MasterApprovalItem[] @relation("CreatedApprovalItems")
  createdApprovals Approval[] @relation("CreatedApprovals")
  createdNotifications Notification[] @relation("NotificationCreator")
  notificationRecipients NotificationRecipient[] @relation("NotificationRecipient")

  @@map("t_users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("t_refresh_tokens")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  menus       Menu[]       @relation("MenuToRole")
  permissions Permission[] @relation("PermissionToRole")
  notificationRecipients NotificationRecipient[]

  @@map("m_roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@map("m_permissions")
}

model Menu {
  id        String   @id @default(uuid())
  name      String
  path      String?
  icon      String?
  parentId  String?
  order     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Menu?    @relation("MenuHierarchy", fields: [parentId], references: [id])
  children  Menu[]   @relation("MenuHierarchy")
  roles     Role[]   @relation("MenuToRole")

  @@map("m_menus")
}

model Office {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  description String?
  address     String?
  phone       String?
  email       String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parent      Office?  @relation("OfficeHierarchy", fields: [parentId], references: [id])
  children    Office[] @relation("OfficeHierarchy")
  users       User[]

  @@map("m_offices")
}

model Department {
  id          String @id @default(uuid())
  name        String
  code        String @unique
  description String? @db.Text
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  users       User[]
  approvalItems MasterApprovalItem[]
  approvals Approval[]
  @@map("m_departments")
}

model JobPosition {
  id          String @id @default(uuid())
  name        String
  code        String @unique
  level       Int
  description String? @db.Text
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  users       User[]
  approvalItems MasterApprovalItem[]
  approvals   Approval[]
  @@map("m_job_positions")
}

model MasterApproval {
  id String @id @default(uuid())
  entity String
  isActive Boolean @default(true)
  items MasterApprovalItem[]

  @@map("m_approval")
}

model MasterApprovalItem {
  id String @id @default(uuid())
  mApprovalId String
  mApproval MasterApproval @relation(fields:[mApprovalId], references:[id])
  order Int
  job_position_id String
  department_id String
  createdBy String
  createdAt DateTime @default(now())
  jobPosition JobPosition @relation(fields: [job_position_id], references: [id])
  department Department @relation(fields: [department_id], references: [id])
  creator User @relation("CreatedApprovalItems", fields: [createdBy], references: [id])

  @@map("m_approval_item")
}

model Approval {
  id String @id @default(uuid())
  mApprovalId String
  entityId String
  department_id String
  job_position_id String
  status String
  notes String
  createdAt DateTime @default(now())
  createdBy String
  department Department @relation(fields: [department_id], references: [id])
  jobPosition JobPosition @relation(fields: [job_position_id], references: [id])
  creator User @relation("CreatedApprovals", fields: [createdBy], references: [id])

  @@map("t_approvals")
}

model Setting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("m_settings")
}

// Notification System Models
model NotificationType {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  notifications Notification[]

  @@map("m_notification_types")
}

model Notification {
  id                String           @id @default(uuid())
  title             String
  message           String
  context           String?          // Module/context where notification was triggered
  contextId         String?          // Specific ID of the context (e.g., user ID, document ID)
  typeId            String
  isRead            Boolean          @default(false)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  readAt            DateTime?
  
  // Relations
  type              NotificationType @relation(fields: [typeId], references: [id])
  recipients        NotificationRecipient[]
  createdBy         String
  creator           User             @relation("NotificationCreator", fields: [createdBy], references: [id])

  @@map("t_notifications")
}

model NotificationRecipient {
  id             String       @id @default(uuid())
  notificationId String
  roleId         String
  userId         String?      // Optional: specific user if targeting individual
  isRead         Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  
  // Relations
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  role           Role         @relation(fields: [roleId], references: [id])
  user           User?        @relation("NotificationRecipient", fields: [userId], references: [id])

  @@unique([notificationId, roleId, userId])
  @@map("t_notification_recipients")
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?    @db.Text
  imageUrl    String?
  parentId    String?
  order       Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Self-referencing hierarchy
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")

  @@map("m_categories")
}
